{"ast":null,"code":"var _jsxFileName = \"/home/lion772/react-apps-course/03-handling-side-effects/src/store/auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\n\n//custom management component\nexport const AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    localStorage.getItem(\"isLoggedIn\") && setIsLoggedIn(true);\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n  };\n\n  //setter localstorage\n  isLoggedIn && localStorage.setItem(\"isLoggedIn\", \"1\");\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","children","setIsLoggedIn","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem"],"sources":["/home/lion772/react-apps-course/03-handling-side-effects/src/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout: () => {},\n    onLogin: (email, password) => {},\n});\n\n//custom management component\nexport const AuthContextProvider = ({ children }) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    useEffect(() => {\n        localStorage.getItem(\"isLoggedIn\") && setIsLoggedIn(true);\n    }, []);\n\n    const loginHandler = (email, password) => {\n        // We should of course check email and password\n        // But it's just a dummy/ demo anyways\n        setIsLoggedIn(true);\n    };\n\n    //setter localstorage\n    isLoggedIn && localStorage.setItem(\"isLoggedIn\", \"1\");\n\n    const logoutHandler = () => {\n        localStorage.removeItem(\"isLoggedIn\");\n        setIsLoggedIn(false);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                isLoggedIn: isLoggedIn,\n                onLogout: logoutHandler,\n                onLogin: loginHandler,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEnD,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACpCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAClBC,OAAO,EAAE,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAC;AACnC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,mBAAmB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC5C,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACZY,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAIF,aAAa,CAAC,IAAI,CAAC;EAC7D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,YAAY,GAAG,CAACP,KAAK,EAAEC,QAAQ,KAAK;IACtC;IACA;IACAG,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACAP,UAAU,IAAIQ,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;EAErD,MAAMC,aAAa,GAAG,MAAM;IACxBJ,YAAY,CAACK,UAAU,CAAC,YAAY,CAAC;IACrCN,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,oBACI,QAAC,WAAW,CAAC,QAAQ;IACjB,KAAK,EAAE;MACHP,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEW,aAAa;MACvBV,OAAO,EAAEQ;IACb,CAAE;IAAA,UAEDJ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU;AAE/B,CAAC;AAAC,GAhCWD,mBAAmB;AAAA,KAAnBA,mBAAmB;AAkChC,eAAeP,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}